name: Data Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-data-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.3.0'
        use-public-rspm: true
    
    - name: Install Pandoc
      uses: r-lib/actions/setup-pandoc@v2
      with:
        pandoc-version: '3.1.1'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev libgdal-dev libudunits2-dev
    
    - name: Install R dependencies (complete set)
      run: |
        Rscript -e "
        options(repos = c(CRAN = 'https://packagemanager.rstudio.com/cran/__linux__/jammy/latest'));
        
        # Install tidyverse first
        install.packages('tidyverse', dependencies = TRUE);
        cat('Tidyverse installed\n');
        
        # Install all packages the script and external functions need
        packages <- c(
          'here', 
          'devtools', 
          'hms', 
          'fs', 
          'knitr', 
          'kableExtra', 
          'DT', 
          'rmarkdown', 
          'plotly', 
          'downloadthis',
          'rlog',          
          'clipr',         
          'cli',           
          'rstudioapi'     
        );
        
        # Install packages with error handling
        for (pkg in packages) {
          tryCatch({
            if (!requireNamespace(pkg, quietly = TRUE)) {
              install.packages(pkg, dependencies = TRUE);
              cat('Installed:', pkg, '\n');
            } else {
              cat('Already available:', pkg, '\n');
            }
          }, error = function(e) {
            cat('Failed to install', pkg, ':', e\$message, '\n');
          });
        }
        
        cat('Package installation completed\n');
        
        # Test loading key packages
        library(tidyverse);
        library(devtools);
        library(rmarkdown);
        library(rlog);
        cat('Key packages loaded successfully\n');
        
        # Check pandoc
        cat('Pandoc available:', rmarkdown::pandoc_available(), '\n');
        if (rmarkdown::pandoc_available()) {
          cat('Pandoc version:', as.character(rmarkdown::pandoc_version()), '\n');
        }
        "
    
    - name: Create modified validation script (with error fixes)
      run: |
        mkdir -p data_checks_reports
        
        # Download the original script
        curl -L -o data_package_checks_original.R https://github.com/river-corridors-sfa/rcsfa-data_processing_for_publication/raw/refs/heads/main/Data_Package_Validation/data_package_checks_github_action.R
        
        # Create a modified version with better error handling
        cat > data_package_checks_fixed.R << 'EOF'
        ### Modified data_package_checks_github_action.R with error fixes
        rm(list=ls(all=T))
        
        ### Static Configuration ######################################################
        user_input_has_header_rows <- FALSE
        has_flmd <- FALSE
        flmd_path <- ""
        user_directory <- getwd()
        report_author <- "Brieanne Forbes via GitHub action"
        report_out_dir <- file.path(getwd(), "data_checks_reports")
        dir.create(report_out_dir, showWarnings = FALSE, recursive = TRUE)
        
        ### Load packages with better error handling
        suppressPackageStartupMessages({
          library(here)
          library(tidyverse)
          library(devtools)
          library(hms)
          library(fs)
          library(knitr)
          library(kableExtra)
          library(DT)
          library(rmarkdown)
          library(plotly)
          library(downloadthis)
        })
        
        cat("Working directory:", getwd(), "\n")
        cat("Data directory:", user_directory, "\n")
        cat("Output directory:", report_out_dir, "\n")
        cat("Report author:", report_author, "\n")
        
        # Load functions with error handling
        tryCatch({
          source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Documentation/functions/create_flmd.R")
          source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Transformation/functions/load_tabular_data.R")
          source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks.R")
        }, error = function(e) {
          cat("Error loading functions:", e$message, "\n")
          quit(status = 1)
        })
        
        # Validate directory
        if (!dir.exists(user_directory)) {
          cat("Error: Directory does not exist:", user_directory, "\n")
          quit(status = 1)
        }
        
        all_files <- list.files(user_directory, recursive = TRUE)
        if (length(all_files) == 0) {
          cat("Warning: Directory contains no files:", user_directory, "\n")
          quit(status = 0)
        }
        
        cat("Found", length(all_files), "total files in repository\n")
        
        # Get files
        tryCatch({
          dp_files <- get_files(directory = user_directory)
          cat("Identified", nrow(dp_files), "data files for processing\n")
        }, error = function(e) {
          cat("Error identifying files:", e$message, "\n")
          quit(status = 1)
        })
        
        # Load FLMD
        if (has_flmd && flmd_path != "") {
          tryCatch({
            data_package_flmd <- read_csv(flmd_path) %>%
              mutate(across(everything(), ~ case_when(. == -9999 ~ NA,
                                                      . == "N/A" ~ NA,
                                                      TRUE ~ .)))
            cat("Loaded FLMD file:", flmd_path, "\n")
          }, error = function(e) {
            cat("Error loading FLMD file:", e$message, "\n")
            quit(status = 1)
          })
        } else {
          data_package_flmd <- NA
        }
        
        # Load data
        tryCatch({
          data_package_data <- load_tabular_data(
            files_df = dp_files,
            flmd_df = data_package_flmd,
            query_header_info = user_input_has_header_rows
          )
          cat("Successfully loaded", length(data_package_data$tabular_data), "data files\n")
          
          for (file_name in names(data_package_data$tabular_data)) {
            df <- data_package_data$tabular_data[[file_name]]
            cat(" -", file_name, ":", nrow(df), "rows,", ncol(df), "columns\n")
          }
        }, error = function(e) {
          cat("Error loading data:", e$message, "\n")
          quit(status = 1)
        })
        
        # Run checks with better error handling
        data_package_checks <- NULL
        tryCatch({
          # Try to run checks - this seems to have the promise evaluation error
          cat("Attempting to run data package checks...\n")
          data_package_checks <- check_data_package(data_package_data = data_package_data)
          cat("Successfully completed data package checks\n")
        }, error = function(e) {
          cat("Error running checks:", e$message, "\n")
          cat("Continuing without checks...\n")
          # Don't quit - continue with summary generation
        })
        
        # Generate HTML report
        html_success <- FALSE
        tryCatch({
          cat("Checking pandoc availability...\n")
          cat("Pandoc available:", pandoc_available(), "\n")
          
          if (pandoc_available()) {
            out_file <- paste0("Checks_Report_", Sys.Date(), ".html")
            rmd_url <- "https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks_report.Rmd"
            download.file(rmd_url, destfile = "checks_report.Rmd", mode = "wb")
            
            render("checks_report.Rmd",
                   output_format = "html_document",
                   output_dir = report_out_dir,
                   output_file = out_file)
            
            cat("HTML report generated:", file.path(report_out_dir, out_file), "\n")
            file.remove("checks_report.Rmd")
            html_success <- TRUE
          } else {
            cat("Pandoc not available - skipping HTML report\n")
          }
        }, error = function(e) {
          cat("Error generating HTML report:", e$message, "\n")
          cat("Continuing with text summary...\n")
        })
        
        # Generate text summary
        summary_file <- file.path(report_out_dir, paste0("validation_summary_", Sys.Date(), ".txt"))
        
        cat("=== DATA PACKAGE VALIDATION SUMMARY ===\n", file = summary_file)
        cat("Generated:", as.character(Sys.time()), "\n", file = summary_file, append = TRUE)
        cat("Author:", report_author, "\n", file = summary_file, append = TRUE)
        cat("Repository:", user_directory, "\n", file = summary_file, append = TRUE)
        cat("Files processed:", length(data_package_data$tabular_data), "\n\n", file = summary_file, append = TRUE)
        
        cat("FILES ANALYZED:\n", file = summary_file, append = TRUE)
        for (file_name in names(data_package_data$tabular_data)) {
          df <- data_package_data$tabular_data[[file_name]]
          cat(sprintf("  %s: %d rows, %d columns\n", basename(file_name), nrow(df), ncol(df)),
              file = summary_file, append = TRUE)
        }
        
        # Save check results if available
        if (!is.null(data_package_checks)) {
          cat("\nCHECK RESULTS:\n", file = summary_file, append = TRUE)
          cat("Validation checks completed successfully\n", file = summary_file, append = TRUE)
          tryCatch({
            saveRDS(data_package_checks, file.path(report_out_dir, "validation_results.rds"))
          }, error = function(e) {
            cat("Could not save RDS file:", e$message, "\n")
          })
        } else {
          cat("\nCHECK RESULTS:\n", file = summary_file, append = TRUE)
          cat("Validation checks failed - see log for details\n", file = summary_file, append = TRUE)
        }
        
        cat("HTML report generated:", html_success, "\n", file = summary_file, append = TRUE)
        
        cat("\nSummary saved to:", summary_file, "\n")
        cat("Validation process completed!\n")
        EOF
    
    - name: Run data validation
      run: |
        echo "Running fixed validation script..."
        echo "Current directory: $(pwd)"
        echo ""
        
        # Run the fixed script
        Rscript data_package_checks_fixed.R > data_checks_reports/validation-log.txt 2>&1
        
        SCRIPT_EXIT_CODE=$?
        echo "Script completed with exit code: $SCRIPT_EXIT_CODE"
        echo ""
        echo "=== VALIDATION LOG ==="
        cat data_checks_reports/validation-log.txt
        echo "=== END LOG ==="
        
        exit 0
      continue-on-error: true
    
    - name: Create GitHub summary
      run: |
        echo "## 📊 Data Package Validation Results" > data_checks_reports/validation-summary.md
        echo "**Generated:** $(date)" >> data_checks_reports/validation-summary.md
        echo "**Commit:** ${{ github.sha }}" >> data_checks_reports/validation-summary.md
        echo "**Author:** Brieanne Forbes via GitHub action" >> data_checks_reports/validation-summary.md
        echo "" >> data_checks_reports/validation-summary.md
        
        # Check for HTML report
        if [ -f data_checks_reports/Checks_Report_*.html ]; then
          HTML_FILE=$(basename data_checks_reports/Checks_Report_*.html)
          echo "### 📄 Full HTML Report Available:" >> data_checks_reports/validation-summary.md
          echo "✅ **Success!** Download the interactive report: [\`$HTML_FILE\`](../../raw/${{ github.sha }}/data_checks_reports/$HTML_FILE)" >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
        else
          echo "### ⚠️ HTML Report Generation" >> data_checks_reports/validation-summary.md
          echo "HTML report was not generated. Check the validation log below for details." >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
        fi
        
        # Add summary file if available
        if [ -f data_checks_reports/validation_summary_*.txt ]; then
          echo "### Summary:" >> data_checks_reports/validation-summary.md
          echo "\`\`\`" >> data_checks_reports/validation-summary.md
          cat data_checks_reports/validation_summary_*.txt >> data_checks_reports/validation-summary.md
          echo "\`\`\`" >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
        fi
        
        # Add validation log
        echo "### Validation Log:" >> data_checks_reports/validation-summary.md
        echo "<details><summary>Click to expand validation log</summary>" >> data_checks_reports/validation-summary.md
        echo "" >> data_checks_reports/validation-summary.md
        echo "\`\`\`" >> data_checks_reports/validation-summary.md
        if [ -f data_checks_reports/validation-log.txt ]; then
          cat data_checks_reports/validation-log.txt >> data_checks_reports/validation-summary.md
        else
          echo "No validation log found" >> data_checks_reports/validation-summary.md
        fi
        echo "\`\`\`" >> data_checks_reports/validation-summary.md
        echo "</details>" >> data_checks_reports/validation-summary.md
        
        echo "" >> data_checks_reports/validation-summary.md
        echo "📁 **All files available in:** \`data_checks_reports/\`" >> data_checks_reports/validation-summary.md
    
    - name: List all generated files
      run: |
        echo "Files created in data_checks_reports:"
        ls -la data_checks_reports/ || echo "No data_checks_reports directory found"
    
    - name: Check if results changed
      id: changes
      run: |
        git add data_checks_reports/
        if git diff --staged --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit results back to repo
      if: steps.changes.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add data_checks_reports/
        git commit -m "📊 Update data package validation report [skip ci]
        
        - Generated from commit ${{ github.sha }}
        - Validation completed on $(date)
        - Author: Brieanne Forbes via GitHub action"
        git push
    
    - name: Comment on PR with results
      if: github.event_name == 'pull_request' && steps.changes.outputs.changed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr comment ${{ github.event.pull_request.number }} \
          --body-file data_checks_reports/validation-summary.md
    
    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      with:
        name: data-validation-report-${{ github.sha }}
        path: data_checks_reports/
        retention-days: 30