name: Data Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-data-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.3.0'
        use-public-rspm: true
    
    - name: Install Pandoc
      uses: r-lib/actions/setup-pandoc@v2
      with:
        pandoc-version: '3.1.1'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev libgdal-dev libudunits2-dev
    
    - name: Install R dependencies
      run: |
        Rscript -e "
        options(repos = c(CRAN = 'https://packagemanager.rstudio.com/cran/__linux__/jammy/latest'));
        packages <- c('tidyverse', 'here', 'devtools', 'hms', 'fs', 'knitr', 'kableExtra', 'DT', 'rmarkdown', 'plotly', 'downloadthis', 'rlog', 'clipr', 'cli', 'rstudioapi');
        install.packages(packages, dependencies = TRUE);
        "
    
    - name: Debug and fix validation script
      run: |
        mkdir -p data_checks_reports
        
        cat > debug_validation.R << 'EOF'
        # Debug Data Package Validation Script
        rm(list=ls(all=T))
        
        # Configuration
        user_directory <- getwd()
        report_author <- "Brieanne Forbes via GitHub action"
        report_out_dir <- file.path(getwd(), "data_checks_reports")
        dir.create(report_out_dir, showWarnings = FALSE, recursive = TRUE)
        
        # Load packages
        suppressPackageStartupMessages({
          library(here)
          library(tidyverse)
          library(devtools)
          library(hms)
          library(fs)
          library(rlog)
        })
        
        cat("=== DEBUGGING DATA VALIDATION ===\n")
        cat("Working directory:", getwd(), "\n")
        
        # Load validation functions
        cat("Loading validation functions...\n")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Documentation/functions/create_flmd.R")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Transformation/functions/load_tabular_data.R")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks.R")
        
        # Get and load data
        dp_files <- get_files(directory = user_directory)
        data_package_data <- load_tabular_data(files_df = dp_files, flmd_df = NA, query_header_info = FALSE)
        
        cat("Data loaded successfully. Now debugging validation function...\n")
        
        # Debug: Let's examine the check_data_package function
        cat("Checking function signature...\n")
        print(formals(check_data_package))
        
        cat("Checking function environment...\n")
        print(environment(check_data_package))
        
        # Try to identify the problematic parameter
        cat("Attempting to run validation with explicit parameters...\n")
        
        # Method 1: Try with minimal parameters
        tryCatch({
          cat("Method 1: Calling with just data_package_data...\n")
          result1 <- check_data_package(data_package_data = data_package_data)
          cat("✅ Method 1 SUCCESS!\n")
        }, error = function(e) {
          cat("❌ Method 1 failed:", e$message, "\n")
        })
        
        # Method 2: Try creating input_parameters explicitly
        tryCatch({
          cat("Method 2: Creating input_parameters explicitly...\n")
          
          # Create a clean input_parameters object
          input_parameters <- list(
            user_directory = user_directory,
            report_author = report_author,
            report_out_dir = report_out_dir,
            user_input_has_header_rows = FALSE,
            has_flmd = FALSE,
            flmd_path = ""
          )
          
          result2 <- check_data_package(data_package_data = data_package_data, input_parameters = input_parameters)
          cat("✅ Method 2 SUCCESS!\n")
        }, error = function(e) {
          cat("❌ Method 2 failed:", e$message, "\n")
        })
        
        # Method 3: Try in a completely clean environment
        tryCatch({
          cat("Method 3: Clean environment approach...\n")
          
          # Create a new environment to avoid conflicts
          clean_env <- new.env()
          
          # Copy only what we need
          clean_env$data_package_data <- data_package_data
          
          # Try to run in clean environment
          with(clean_env, {
            result3 <- check_data_package(data_package_data = data_package_data)
          })
          cat("✅ Method 3 SUCCESS!\n")
        }, error = function(e) {
          cat("❌ Method 3 failed:", e$message, "\n")
        })
        
        # Method 4: Try sourcing the function directly and calling
        tryCatch({
          cat("Method 4: Direct function execution...\n")
          
          # Clear any potentially problematic variables
          if (exists("input_parameters", envir = .GlobalEnv)) {
            rm(input_parameters, envir = .GlobalEnv)
          }
          
          # Source the checks script again to ensure clean function
          source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks.R")
          
          # Try calling with explicit argument matching
          result4 <- do.call("check_data_package", list(data_package_data = data_package_data))
          cat("✅ Method 4 SUCCESS!\n")
        }, error = function(e) {
          cat("❌ Method 4 failed:", e$message, "\n")
        })
        
        # Method 5: Inspect the actual function code to find the issue
        cat("Method 5: Examining function source code...\n")
        tryCatch({
          # Download and examine the checks.R file directly
          temp_file <- tempfile(fileext = ".R")
          download.file("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks.R", temp_file)
          
          # Read the file content
          checks_code <- readLines(temp_file)
          
          # Look for problematic patterns
          problem_lines <- grep("input_parameters", checks_code)
          if (length(problem_lines) > 0) {
            cat("Found input_parameters references at lines:", problem_lines, "\n")
            cat("Problematic lines:\n")
            for (line_num in problem_lines) {
              cat(sprintf("Line %d: %s\n", line_num, checks_code[line_num]))
            }
          }
          
          # Look for default argument issues
          default_arg_lines <- grep("=.*input_parameters", checks_code)
          if (length(default_arg_lines) > 0) {
            cat("Found default argument issues at lines:", default_arg_lines, "\n")
          }
          
        }, error = function(e) {
          cat("Could not examine source code:", e$message, "\n")
        })
        
        cat("\n=== DEBUG COMPLETE ===\n")
        cat("Please check the output above to identify which method worked.\n")
        EOF
    
    - name: Run debugging script
      run: |
        echo "🔍 Running validation debugging..."
        Rscript debug_validation.R > data_checks_reports/debug-log.txt 2>&1
        
        echo "=== DEBUG RESULTS ==="
        cat data_checks_reports/debug-log.txt
        echo "=== END DEBUG ==="
      continue-on-error: true
    
    - name: Create working validation based on debug results
      run: |
        cat > working_validation.R << 'EOF'
        # Working Data Package Validation (based on debug results)
        rm(list=ls(all=T))
        
        # Configuration
        user_directory <- getwd()
        report_author <- "Brieanne Forbes via GitHub action"
        report_out_dir <- file.path(getwd(), "data_checks_reports")
        dir.create(report_out_dir, showWarnings = FALSE, recursive = TRUE)
        
        # Load packages
        suppressPackageStartupMessages({
          library(here)
          library(tidyverse)
          library(devtools)
          library(hms)
          library(fs)
          library(rlog)
        })
        
        cat("=== RUNNING WORKING VALIDATION ===\n")
        
        # Load functions
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Documentation/functions/create_flmd.R")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Transformation/functions/load_tabular_data.R")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks.R")
        
        # Load data
        dp_files <- get_files(directory = user_directory)
        data_package_data <- load_tabular_data(files_df = dp_files, flmd_df = NA, query_header_info = FALSE)
        
        cat("Loaded", length(data_package_data$tabular_data), "data files\n")
        
        # Try the validation methods that worked in debug
        validation_result <- NULL
        validation_success <- FALSE
        
        # Try Method 2 first (explicit input_parameters)
        if (!validation_success) {
          tryCatch({
            cat("Trying explicit input_parameters method...\n")
            input_parameters <- list(
              user_directory = user_directory,
              report_author = report_author,
              report_out_dir = report_out_dir,
              user_input_has_header_rows = FALSE,
              has_flmd = FALSE,
              flmd_path = ""
            )
            validation_result <- check_data_package(data_package_data = data_package_data, input_parameters = input_parameters)
            validation_success <- TRUE
            cat("✅ SUCCESS with explicit input_parameters!\n")
          }, error = function(e) {
            cat("Failed with input_parameters:", e$message, "\n")
          })
        }
        
        # Try Method 1 (just data_package_data)
        if (!validation_success) {
          tryCatch({
            cat("Trying minimal parameters method...\n")
            validation_result <- check_data_package(data_package_data = data_package_data)
            validation_success <- TRUE
            cat("✅ SUCCESS with minimal parameters!\n")
          }, error = function(e) {
            cat("Failed with minimal parameters:", e$message, "\n")
          })
        }
        
        # Try Method 4 (do.call)
        if (!validation_success) {
          tryCatch({
            cat("Trying do.call method...\n")
            validation_result <- do.call("check_data_package", list(data_package_data = data_package_data))
            validation_success <- TRUE
            cat("✅ SUCCESS with do.call!\n")
          }, error = function(e) {
            cat("Failed with do.call:", e$message, "\n")
          })
        }
        
        if (validation_success) {
          cat("🎉 VALIDATION CHECKS COMPLETED SUCCESSFULLY!\n")
          
          # Save validation results
          saveRDS(validation_result, file.path(report_out_dir, "validation_results.rds"))
          
          # Create detailed summary
          summary_file <- file.path(report_out_dir, paste0("validation_summary_", Sys.Date(), ".txt"))
          
          cat("=== DATA PACKAGE VALIDATION REPORT ===\n", file = summary_file)
          cat("Generated:", as.character(Sys.time()), "\n", file = summary_file, append = TRUE)
          cat("Author:", report_author, "\n", file = summary_file, append = TRUE)
          cat("Validation Status: SUCCESS ✅\n", file = summary_file, append = TRUE)
          cat("Files processed:", length(data_package_data$tabular_data), "\n\n", file = summary_file, append = TRUE)
          
          # Add validation results summary
          cat("VALIDATION RESULTS:\n", file = summary_file, append = TRUE)
          if (is.list(validation_result)) {
            for (result_name in names(validation_result)) {
              cat(sprintf("- %s: completed\n", result_name), file = summary_file, append = TRUE)
            }
          }
          
        } else {
          cat("❌ All validation methods failed\n")
        }
        
        cat("Validation process completed!\n")
        EOF
    
    - name: Run working validation
      run: |
        echo "🚀 Running working validation..."
        Rscript working_validation.R > data_checks_reports/validation-log.txt 2>&1
        
        echo "=== VALIDATION RESULTS ==="
        cat data_checks_reports/validation-log.txt
        echo "=== END RESULTS ==="
      continue-on-error: true
    
    - name: Create GitHub summary
      run: |
        echo "## 📊 Data Package Validation Results" > data_checks_reports/validation-summary.md
        echo "**Generated:** $(date)" >> data_checks_reports/validation-summary.md
        echo "**Commit:** ${{ github.sha }}" >> data_checks_reports/validation-summary.md
        echo "**Author:** Brieanne Forbes via GitHub action" >> data_checks_reports/validation-summary.md
        echo "" >> data_checks_reports/validation-summary.md
        
        # Check if validation was successful
        if grep -q "VALIDATION CHECKS COMPLETED SUCCESSFULLY" data_checks_reports/validation-log.txt; then
          echo "### ✅ Validation Status: SUCCESS" >> data_checks_reports/validation-summary.md
          echo "Data validation checks completed successfully!" >> data_checks_reports/validation-summary.md
        else
          echo "### ⚠️ Validation Status: DEBUGGING" >> data_checks_reports/validation-summary.md
          echo "Working to resolve validation function compatibility..." >> data_checks_reports/validation-summary.md
        fi
        echo "" >> data_checks_reports/validation-summary.md
        
        # Add summary if available
        if [ -f data_checks_reports/validation_summary_*.txt ]; then
          echo "### 📋 Summary Report" >> data_checks_reports/validation-summary.md
          echo "\`\`\`" >> data_checks_reports/validation-summary.md
          cat data_checks_reports/validation_summary_*.txt >> data_checks_reports/validation-summary.md
          echo "\`\`\`" >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
        fi
        
        # Add debug log
        echo "### 🔍 Processing Log" >> data_checks_reports/validation-summary.md
        echo "<details><summary>Click to expand processing details</summary>" >> data_checks_reports/validation-summary.md
        echo "" >> data_checks_reports/validation-summary.md
        echo "\`\`\`" >> data_checks_reports/validation-summary.md
        cat data_checks_reports/validation-log.txt >> data_checks_reports/validation-summary.md
        echo "\`\`\`" >> data_checks_reports/validation-summary.md
        echo "</details>" >> data_checks_reports/validation-summary.md
    
    - name: Check if results changed
      id: changes
      run: |
        git add data_checks_reports/
        if git diff --staged --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit results back to repo
      if: steps.changes.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add data_checks_reports/
        git commit -m "📊 Data validation debug and results [skip ci]
        
        - Generated from commit ${{ github.sha }}
        - Debugging validation function compatibility
        - Author: Brieanne Forbes via GitHub action"
        git push
    
    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      with:
        name: data-validation-debug-${{ github.sha }}
        path: data_checks_reports/
        retention-days: 30