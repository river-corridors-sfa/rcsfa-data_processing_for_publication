name: Data Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-data-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.3.0'
        use-public-rspm: true
    
    - name: Install Pandoc
      uses: r-lib/actions/setup-pandoc@v2
      with:
        pandoc-version: '3.1.1'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev libgdal-dev libudunits2-dev
    
    - name: Install R dependencies
      run: |
        Rscript -e "
        options(repos = c(CRAN = 'https://packagemanager.rstudio.com/cran/__linux__/jammy/latest'));
        packages <- c('tidyverse', 'here', 'devtools', 'hms', 'fs', 'knitr', 'kableExtra', 'DT', 'rmarkdown', 'plotly', 'downloadthis', 'rlog', 'clipr', 'cli', 'rstudioapi');
        install.packages(packages, dependencies = TRUE);
        "
    
    - name: Create fixed validation script
      run: |
        mkdir -p data_checks_reports
        
        cat > fixed_validation.R << 'EOF'
        # Fixed Data Package Validation Script
        rm(list=ls(all=T))
        
        # Configuration
        user_directory <- getwd()
        report_author <- "Brieanne Forbes via GitHub action"
        report_out_dir <- file.path(getwd(), "data_checks_reports")
        dir.create(report_out_dir, showWarnings = FALSE, recursive = TRUE)
        
        # Load packages
        suppressPackageStartupMessages({
          library(here)
          library(tidyverse)
          library(devtools)
          library(hms)
          library(fs)
          library(rlog)
          library(knitr)
          library(kableExtra)
          library(DT)
          library(rmarkdown)
          library(plotly)
          library(downloadthis)
        })
        
        cat("=== DATA PACKAGE VALIDATION WITH FIXES ===\n")
        cat("Working directory:", getwd(), "\n")
        cat("Report author:", report_author, "\n\n")
        
        # Load validation functions
        cat("Loading validation functions...\n")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Documentation/functions/create_flmd.R")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Transformation/functions/load_tabular_data.R")
        source_url("https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks.R")
        
        # Get and load data
        dp_files <- get_files(directory = user_directory)
        data_package_data <- load_tabular_data(files_df = dp_files, flmd_df = NA, query_header_info = FALSE)
        
        cat("Successfully loaded", length(data_package_data$tabular_data), "data files\n")
        
        # Create the COMPLETE input_parameters structure (based on lines 63-80 from checks.R)
        cat("Creating complete input_parameters structure...\n")
        
        input_parameters <- list(
          # Basic configuration
          user_directory = user_directory,
          report_author = report_author,
          report_out_dir = report_out_dir,
          user_input_has_header_rows = FALSE,
          has_flmd = FALSE,
          flmd_path = "",
          
          # Required file strings (from the original script)
          required_file_strings = c("data_dictionary", "file_level_metadata", "readme"),
          
          # Special characters to check for
          special_chrs = c("&", "#", "@", "$", "%", "^", "*", "(", ")", 
                          "+", "=", "[", "]", "{", "}", "|", "\\", 
                          ":", ";", "\"", "'", "<", ">", ",", "?", "/", "~", "`"),
          
          # Non-proprietary extensions 
          non_proprietary_extensions = c(".xlsx", ".xls", ".docx", ".doc"),
          
          # Missing value codes
          missing_value_codes = c("", " ", "NA", "N/A", "na", "n/a", "NULL", 
                                 "null", "Null", "-9999", "-999", "NaN", 
                                 "nan", "#N/A", "#NULL!", "NIL", "nil"),
          
          # File types to exclude
          exclude_files = NA_character_,
          include_files = NA_character_,
          include_dot_files = FALSE
        )
        
        cat("✅ Complete input_parameters created\n")
        
        # Now run the validation with complete parameters
        cat("Running data package validation...\n")
        
        validation_success <- FALSE
        validation_result <- NULL
        
        tryCatch({
          validation_result <- check_data_package(
            data_package_data = data_package_data, 
            input_parameters = input_parameters
          )
          validation_success <- TRUE
          cat("🎉 VALIDATION CHECKS COMPLETED SUCCESSFULLY!\n")
        }, error = function(e) {
          cat("❌ Validation failed:", e$message, "\n")
          cat("Error details:\n")
          print(e)
        })
        
        if (validation_success && !is.null(validation_result)) {
          # Save validation results
          cat("Saving validation results...\n")
          saveRDS(validation_result, file.path(report_out_dir, "validation_results.rds"))
          
          # Generate HTML report
          cat("Generating HTML report...\n")
          tryCatch({
            out_file <- paste0("Checks_Report_", Sys.Date(), ".html")
            rmd_url <- "https://raw.githubusercontent.com/river-corridors-sfa/rcsfa-data_processing_for_publication/main/Data_Package_Validation/functions/checks_report.Rmd"
            download.file(rmd_url, destfile = "checks_report.Rmd", mode = "wb")
            
            render("checks_report.Rmd",
                   output_format = "html_document",
                   output_dir = report_out_dir,
                   output_file = out_file)
            
            cat("✅ HTML report generated:", file.path(report_out_dir, out_file), "\n")
            file.remove("checks_report.Rmd")
          }, error = function(e) {
            cat("⚠️ HTML report generation failed:", e$message, "\n")
          })
          
          # Create comprehensive summary
          summary_file <- file.path(report_out_dir, paste0("validation_summary_", Sys.Date(), ".txt"))
          
          cat("=== DATA PACKAGE VALIDATION REPORT ===\n", file = summary_file)
          cat("Generated:", as.character(Sys.time()), "\n", file = summary_file, append = TRUE)
          cat("Author:", report_author, "\n", file = summary_file, append = TRUE)
          cat("Status: VALIDATION COMPLETED SUCCESSFULLY ✅\n", file = summary_file, append = TRUE)
          cat("Files processed:", length(data_package_data$tabular_data), "\n\n", file = summary_file, append = TRUE)
          
          cat("FILES ANALYZED:\n", file = summary_file, append = TRUE)
          for (file_name in names(data_package_data$tabular_data)) {
            df <- data_package_data$tabular_data[[file_name]]
            cat(sprintf("  📄 %s: %d rows, %d columns\n", basename(file_name), nrow(df), ncol(df)), 
                file = summary_file, append = TRUE)
          }
          
          cat("\nVALIDATION RESULTS:\n", file = summary_file, append = TRUE)
          if (is.list(validation_result)) {
            cat("✅ Data package validation checks completed\n", file = summary_file, append = TRUE)
            cat("✅ All validation functions executed successfully\n", file = summary_file, append = TRUE)
            cat("📊 Detailed results available in validation_results.rds\n", file = summary_file, append = TRUE)
            
            # Add summary of validation results
            for (result_name in names(validation_result)) {
              if (is.data.frame(validation_result[[result_name]])) {
                cat(sprintf("  - %s: %d records\n", result_name, nrow(validation_result[[result_name]])), 
                    file = summary_file, append = TRUE)
              } else {
                cat(sprintf("  - %s: completed\n", result_name), file = summary_file, append = TRUE)
              }
            }
          }
          
          cat("\n=== VALIDATION SUCCESSFUL ===\n", file = summary_file, append = TRUE)
          
        } else {
          # Create failure summary
          summary_file <- file.path(report_out_dir, paste0("validation_summary_", Sys.Date(), ".txt"))
          cat("=== DATA PACKAGE VALIDATION REPORT ===\n", file = summary_file)
          cat("Generated:", as.character(Sys.time()), "\n", file = summary_file, append = TRUE)
          cat("Author:", report_author, "\n", file = summary_file, append = TRUE)
          cat("Status: VALIDATION FAILED ❌\n", file = summary_file, append = TRUE)
          cat("Files loaded:", length(data_package_data$tabular_data), "\n", file = summary_file, append = TRUE)
          cat("Issue: Validation function compatibility problem\n", file = summary_file, append = TRUE)
        }
        
        cat("✅ Validation process completed!\n")
        EOF
    
    - name: Run fixed validation
      run: |
        echo "🚀 Running fixed validation script..."
        Rscript fixed_validation.R > data_checks_reports/validation-log.txt 2>&1
        
        echo "=== VALIDATION RESULTS ==="
        cat data_checks_reports/validation-log.txt
        echo "=== END RESULTS ==="
      continue-on-error: true
    
    - name: Create GitHub summary
      run: |
        echo "## 📊 Data Package Validation Results" > data_checks_reports/validation-summary.md
        echo "**Generated:** $(date)" >> data_checks_reports/validation-summary.md
        echo "**Commit:** ${{ github.sha }}" >> data_checks_reports/validation-summary.md
        echo "**Author:** Brieanne Forbes via GitHub action" >> data_checks_reports/validation-summary.md
        echo "" >> data_checks_reports/validation-summary.md
        
        # Check if validation was successful
        if grep -q "VALIDATION CHECKS COMPLETED SUCCESSFULLY" data_checks_reports/validation-log.txt; then
          echo "### ✅ SUCCESS: Data Validation Completed!" >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
          echo "🎉 **All validation checks have been successfully executed!**" >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
          
          # Add link to HTML report if available
          if [ -f data_checks_reports/Checks_Report_*.html ]; then
            HTML_FILE=$(basename data_checks_reports/Checks_Report_*.html)
            echo "### 📄 Interactive HTML Report" >> data_checks_reports/validation-summary.md
            echo "📥 **Download the full validation report:** [\`$HTML_FILE\`](../../raw/${{ github.sha }}/data_checks_reports/$HTML_FILE)" >> data_checks_reports/validation-summary.md
            echo "" >> data_checks_reports/validation-summary.md
          fi
          
        else
          echo "### ⚠️ Validation Status: Working on Compatibility" >> data_checks_reports/validation-summary.md
          echo "The validation functions are being debugged for GitHub Actions compatibility." >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
        fi
        
        # Add summary report
        if [ -f data_checks_reports/validation_summary_*.txt ]; then
          echo "### 📋 Validation Summary" >> data_checks_reports/validation-summary.md
          echo "\`\`\`" >> data_checks_reports/validation-summary.md
          cat data_checks_reports/validation_summary_*.txt >> data_checks_reports/validation-summary.md
          echo "\`\`\`" >> data_checks_reports/validation-summary.md
          echo "" >> data_checks_reports/validation-summary.md
        fi
        
        # Add processing log in collapsible section
        echo "### 🔍 Processing Details" >> data_checks_reports/validation-summary.md
        echo "<details><summary>Click to expand validation log</summary>" >> data_checks_reports/validation-summary.md
        echo "" >> data_checks_reports/validation-summary.md
        echo "\`\`\`" >> data_checks_reports/validation-summary.md
        cat data_checks_reports/validation-log.txt >> data_checks_reports/validation-summary.md
        echo "\`\`\`" >> data_checks_reports/validation-summary.md
        echo "</details>" >> data_checks_reports/validation-summary.md
        
        echo "" >> data_checks_reports/validation-summary.md
        echo "📁 **All validation files available in:** \`data_checks_reports/\`" >> data_checks_reports/validation-summary.md
    
    - name: List all generated files
      run: |
        echo "📁 Generated validation files:"
        ls -la data_checks_reports/ 2>/dev/null || echo "No files found"
    
    - name: Check if results changed
      id: changes
      run: |
        git add data_checks_reports/
        if git diff --staged --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit results back to repo
      if: steps.changes.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add data_checks_reports/
        git commit -m "📊 Data